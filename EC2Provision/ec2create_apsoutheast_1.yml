--- # Create ec2 instance playbook

- hosts: localhost
  connection: local
  gather_facts: false
  vars:
      keypair: ""
      instance_type: "t2.nano"
      image: "ami-effa328c"
      group: "sgpuppetmaster"
      region: "ap-southeast-1"
      inst_name: "testingname"
      serv_env: "Development"
      serv_class: "General"
      provisionby: "Ansible"
  tasks:
    - name: Create Instance (Debian 8 HVM)
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           keypair={{ keypair }}
           instance_tags='{"Name":"{{ inst_name }}","Environment":"{{ serv_env }}","Class":"{{ serv_class}}","Provision":"{{ provisionby }}"}'
           region={{ region }}
           group={{ group }}
           user_data= |
          #!/bin/bash
          exec > /tmp/autoscale.log 2>&1
          set -x
          TOWER_ADDRESS={{ tower_address }}
          HOST_CONFIG_KEY={{ host_config_key }}
          TEMPLATE_ID={{ template_id }}


          retry_attempts=10
          attempt=0
          while [[ $attempt -lt $retry_attempts ]]
          do
            status_code=`curl -k -s -i --data "host_config_key=$HOST_CONFIG_KEY" https://$TOWER_ADDRESS/api/v1/job_templates/$TEMPLATE_ID/callback/ | head -n 1 | awk '{print $2}'`
            if [[ $status_code == 202 ]]
              then
              exit 0
            fi
            attempt=$(( attempt + 1 ))
            echo "${status_code} received... retrying in 1 minute. (Attempt ${attempt})"
            sleep 60
          done
          exit 1
           wait=true
	   wait_timeout = 600
      register: ec2_info

    - name: Add instances to host group
      add_host: hostname={{ item.public_ip }} groupname=ec2hosts
      with_items: ec2_info.instances

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: ec2_info.instances
